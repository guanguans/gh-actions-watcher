// Copyright (c) 2024 guanguans<ityaozm@gmail.com>
// For the full copyright and license information, please view
// the LICENSE file that was distributed with this source code.
// https://github.com/guanguans/gh-actions-watcher

// Code generated by go-enum DO NOT EDIT.
// Version: 0.6.0
// Revision: 919e61c0174b91303753ee3898569a01abb32c97
// Build Date: 2023-12-18T15:54:43Z
// Built By: goreleaser

package enum

import (
	"fmt"
	"strings"
)

const (
	// RunStatusQueued is a RunStatus of type queued.
	RunStatusQueued RunStatus = "queued"
	// RunStatusPending is a RunStatus of type pending.
	RunStatusPending RunStatus = "pending"
	// RunStatusInProgress is a RunStatus of type in_progress.
	RunStatusInProgress RunStatus = "in_progress"
	// RunStatusCompleted is a RunStatus of type completed.
	RunStatusCompleted RunStatus = "completed"
)

var ErrInvalidRunStatus = fmt.Errorf("not a valid RunStatus, try [%s]", strings.Join(_RunStatusNames, ", "))

var _RunStatusNames = []string{
	string(RunStatusQueued),
	string(RunStatusPending),
	string(RunStatusInProgress),
	string(RunStatusCompleted),
}

// RunStatusNames returns a list of possible string values of RunStatus.
func RunStatusNames() []string {
	tmp := make([]string, len(_RunStatusNames))
	copy(tmp, _RunStatusNames)
	return tmp
}

// RunStatusValues returns a list of the values for RunStatus
func RunStatusValues() []RunStatus {
	return []RunStatus{
		RunStatusQueued,
		RunStatusPending,
		RunStatusInProgress,
		RunStatusCompleted,
	}
}

// String implements the Stringer interface.
func (x RunStatus) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x RunStatus) IsValid() bool {
	_, err := ParseRunStatus(string(x))
	return err == nil
}

var _RunStatusValue = map[string]RunStatus{
	"queued":      RunStatusQueued,
	"pending":     RunStatusPending,
	"in_progress": RunStatusInProgress,
	"completed":   RunStatusCompleted,
}

// ParseRunStatus attempts to convert a string to a RunStatus.
func ParseRunStatus(name string) (RunStatus, error) {
	if x, ok := _RunStatusValue[name]; ok {
		return x, nil
	}
	return RunStatus(""), fmt.Errorf("%s is %w", name, ErrInvalidRunStatus)
}

// MarshalText implements the text marshaller method.
func (x RunStatus) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *RunStatus) UnmarshalText(text []byte) error {
	tmp, err := ParseRunStatus(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

// Set implements the Golang flag.Value interface func.
func (x *RunStatus) Set(val string) error {
	v, err := ParseRunStatus(val)
	*x = v
	return err
}

// Get implements the Golang flag.Getter interface func.
func (x *RunStatus) Get() interface{} {
	return *x
}

// Type implements the github.com/spf13/pFlag Value interface.
func (x *RunStatus) Type() string {
	return "RunStatus"
}
