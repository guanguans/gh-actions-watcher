// Code generated by go-enum DO NOT EDIT.
// Version: 0.6.0
// Revision: 919e61c0174b91303753ee3898569a01abb32c97
// Build Date: 2023-12-18T15:54:43Z
// Built By: goreleaser

package enum

import (
	"errors"
	"fmt"
)

const (
	// RunStatusQueued is a RunStatus of type queued.
	RunStatusQueued RunStatus = "queued"
	// RunStatusPending is a RunStatus of type pending.
	RunStatusPending RunStatus = "pending"
	// RunStatusInProgress is a RunStatus of type in_progress.
	RunStatusInProgress RunStatus = "in_progress"
	// RunStatusCompleted is a RunStatus of type completed.
	RunStatusCompleted RunStatus = "completed"
)

var ErrInvalidRunStatus = errors.New("not a valid RunStatus")

// String implements the Stringer interface.
func (x RunStatus) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x RunStatus) IsValid() bool {
	_, err := ParseRunStatus(string(x))
	return err == nil
}

var _RunStatusValue = map[string]RunStatus{
	"queued":      RunStatusQueued,
	"pending":     RunStatusPending,
	"in_progress": RunStatusInProgress,
	"completed":   RunStatusCompleted,
}

// ParseRunStatus attempts to convert a string to a RunStatus.
func ParseRunStatus(name string) (RunStatus, error) {
	if x, ok := _RunStatusValue[name]; ok {
		return x, nil
	}
	return RunStatus(""), fmt.Errorf("%s is %w", name, ErrInvalidRunStatus)
}
