// Code generated by go-enum DO NOT EDIT.
// Version: 0.6.0
// Revision: 919e61c0174b91303753ee3898569a01abb32c97
// Build Date: 2023-12-18T15:54:43Z
// Built By: goreleaser

package enum

import (
	"errors"
	"fmt"
)

const (
	// RunConclusionActionRequired is a RunConclusion of type action_required.
	RunConclusionActionRequired RunConclusion = "action_required"
	// RunConclusionCancelled is a RunConclusion of type cancelled.
	RunConclusionCancelled RunConclusion = "cancelled"
	// RunConclusionFailure is a RunConclusion of type failure.
	RunConclusionFailure RunConclusion = "failure"
	// RunConclusionNeutral is a RunConclusion of type neutral.
	RunConclusionNeutral RunConclusion = "neutral"
	// RunConclusionSuccess is a RunConclusion of type success.
	RunConclusionSuccess RunConclusion = "success"
	// RunConclusionSkipped is a RunConclusion of type skipped.
	RunConclusionSkipped RunConclusion = "skipped"
	// RunConclusionStale is a RunConclusion of type stale.
	RunConclusionStale RunConclusion = "stale"
	// RunConclusionTimedOut is a RunConclusion of type timed_out.
	RunConclusionTimedOut RunConclusion = "timed_out"
)

var ErrInvalidRunConclusion = errors.New("not a valid RunConclusion")

// String implements the Stringer interface.
func (x RunConclusion) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x RunConclusion) IsValid() bool {
	_, err := ParseRunConclusion(string(x))
	return err == nil
}

var _RunConclusionValue = map[string]RunConclusion{
	"action_required": RunConclusionActionRequired,
	"cancelled":       RunConclusionCancelled,
	"failure":         RunConclusionFailure,
	"neutral":         RunConclusionNeutral,
	"success":         RunConclusionSuccess,
	"skipped":         RunConclusionSkipped,
	"stale":           RunConclusionStale,
	"timed_out":       RunConclusionTimedOut,
}

// ParseRunConclusion attempts to convert a string to a RunConclusion.
func ParseRunConclusion(name string) (RunConclusion, error) {
	if x, ok := _RunConclusionValue[name]; ok {
		return x, nil
	}
	return RunConclusion(""), fmt.Errorf("%s is %w", name, ErrInvalidRunConclusion)
}
