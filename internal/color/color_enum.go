// Code generated by go-enum DO NOT EDIT.
// Version: 0.6.0
// Revision: 919e61c0174b91303753ee3898569a01abb32c97
// Build Date: 2023-12-18T15:54:43Z
// Built By: goreleaser

package color

import (
	"errors"
	"fmt"
)

const (
	// ColorGray is a color of type gray.
	ColorGray color = "#bfbfbf"
	// ColorGreen is a color of type green.
	ColorGreen color = "#008000"
	// ColorOrange is a color of type orange.
	ColorOrange color = "#ff8c00"
	// ColorRed is a color of type red.
	ColorRed color = "#ff0000"
	// ColorWhite is a color of type white.
	ColorWhite color = "#ffffff"
	// ColorBlack is a color of type black.
	ColorBlack color = "#000000"
)

var ErrInvalidcolor = errors.New("not a valid color")

// String implements the Stringer interface.
func (x color) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x color) IsValid() bool {
	_, err := Parsecolor(string(x))
	return err == nil
}

var _colorValue = map[string]color{
	"#bfbfbf": ColorGray,
	"#008000": ColorGreen,
	"#ff8c00": ColorOrange,
	"#ff0000": ColorRed,
	"#ffffff": ColorWhite,
	"#000000": ColorBlack,
}

// Parsecolor attempts to convert a string to a color.
func Parsecolor(name string) (color, error) {
	if x, ok := _colorValue[name]; ok {
		return x, nil
	}
	return color(""), fmt.Errorf("%s is %w", name, ErrInvalidcolor)
}
